makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(s)
s
}
x <-  rbind(c(1, -1/4), c(-1/4, 1))
s <- makeCacheMatrix()
s <- makeCacheMatrix(x)
s$get(x)
s$get()
cacheSolve(s)
?inverse
??inverse
?solve
makeCacheMatrix <- function(x = matrix()) {}
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
s <-makeCacheMatrix(x)
s$get()
cacheSolve(s)
cacheSolve(s)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## The cacheSolve functions will calculate the
## inverse of matrix 'x', and then return that result.
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
## Return a matrix that is the inverse of 'x'
> x <- rbind(c(1, -1/4), c(-1/4, 1))
> s <-makeCacheMatrix(x)
getsolve = getsolve)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
x <- matrix(1:4,2,2)
s <- makeCacheMatrix(x)
s$get(x)
s$get()
cacheSolve(s)
x <- matrix(1:4,2,2)
s <- makeCacheMatrix(x)
s$get()
cacheSolve(s)
cacheSolve(s)
